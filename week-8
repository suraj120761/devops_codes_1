mkdir ~/flask-app
cd ~/flask-app


vim app.py

from flask import Flask
app = Flask(__name__)

@app.route('/')
def home():
    return "Hello from Flask App running on Kubernetes! ðŸš€"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)


vim requirements.txt
Flask==2.2.5

vim Dockerfile

FROM python:3.9-slim
WORKDIR /app
COPY . .
RUN pip install -r requirements.txt
EXPOSE 5000
CMD ["python", "app.py"]


minikube start
eval $(minikube docker-env)

docker build -t flask-k8s-app:1.0 .
docker images


vim deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
      - name: flask-app
        image: flask-k8s-app:1.0   # Local image in Minikube
        imagePullPolicy: Never      # Important for local images
        ports:
        - containerPort: 5000


vim service.yaml


apiVersion: v1
kind: Service
metadata:
  name: flask-service
spec:
  type: NodePort
  selector:
    app: flask-app
  ports:
  - protocol: TCP
    port: 5000
    targetPort: 5000
    nodePort: 31001


kubectl apply -f deployment.yaml
kubectl apply -f service.yaml


kubectl get pods
kubectl get svc





Expected output:

NAME                                  READY   STATUS    RESTARTS   AGE
flask-deployment-xxxxxx               1/1     Running   0          1m
flask-deployment-yyyyyy               1/1     Running   0          1m


Step 8: Access the Application

Use Minikube to get the service URL:

minikube service flask-service


âœ… This will open a browser window with:

Hello from Flask App running on Kubernetes! ðŸš€








